 a name: SemVer

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: 
      - main
    types:
      - closed
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "create release"
  create_release:
    # Condition for the runner
    # if: github.event.pull_request.merged == true
    
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # To use an output in another job, you have to map it to a job output.
    outputs:
      branchName: ${{ steps.gitversion.outputs.branchName }} 
      semVer: ${{ steps.gitversion.outputs.semVer }}
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # create a tag
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0

      - name: Display GitVersion variables (without prefix)
        run: |
          echo "Major: ${{ steps.gitversion.outputs.GitVersion_Major }}"
          echo "Minor: ${{ steps.gitversion.outputs.GitVersion_Minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.GitVersion_Patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.GitVersion_PreReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.GitVersion_PreReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.GitVersion_PreReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.GitVersion_PreReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.GitVersion_WeightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.GitVersion_BuildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.GitVersion_BuildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.GitVersion_FullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.GitVersion_MajorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.GitVersion_SemVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.GitVersion_LegacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.GitVersion_LegacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.GitVersion_AssemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.GitVersion_AssemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.GitVersion_FullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.GitVersion_InformationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.GitVersion_BranchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.GitVersion_EscapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.GitVersion_Sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.GitVersion_ShortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.GitVersion_NuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.GitVersion_NuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.GitVersion_NuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.GitVersion_NuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.GitVersion_VersionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.GitVersion_CommitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.GitVersion_CommitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.GitVersion_UncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.GitVersion_CommitDate }}"
      
      # - name: Determine Version
      #   uses: gittools/actions/gitversion/execute@v0.9.7
      # - name: Display SemVer
      #   run: |
      #     echo "SemVer: $GITVERSION_SEMVER" && echo "$version" && echo "$major.$minor.$patch"
      # - name: Create git tag
      #   run: |
      #     git tag $GITVERSION_SEMVER
      # - name: Push git tag
      #   run: git push origin $GITVERSION_SEMVER
        
      # # Runs a single command using the runners shell
      # - name: Run a one-line script
      #   run: echo The PR was merged

      # # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
      #   run: |
      #     echo Add other actions to build,
      #     echo test, and deploy your project.


    # display-semver:
    #   name: Display Semantic Version
    #   runs-on: ubuntu-latest
    #   needs: calculate-version
    #   env:
    #     SEMVER: ${{ needs.calculate-version.outputs.semVer }}
    #   steps:
    #     - name: Display version
    #       run: |
    #         echo SemVer: $SEMVER
          
    # create-release-notes:
    #   name: Create Release Notes
    #   runs-on: ubuntu-latest
    #   needs: calculate-version
    #   if: contains(needs.calculate-version.outputs.branchName, 'main') # Output variable accessed via `needs` context.
    #   steps:
    #     - run: |
    #         # Output variables can also be accessed in steps, using an expression.
    #         echo "Creating release notes for ${{ needs.calculate-version.outputs.branchName }} branch."
